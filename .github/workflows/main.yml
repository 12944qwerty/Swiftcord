name: Build Nightly

# Controls when the workflow will run
on:
  # Triggers the workflow on pushes on any branch
  push:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build_nightly_release:
    runs-on: macos-12
    timeout-minutes: 30 # If a build exceeds 30 mins, it probably isn't ever going to complete

    steps:
      - uses: actions/checkout@v3
      # Setup SSH identities for init-ing submodules during build
      - uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: "Select Xcode 14.2"
        run: sudo xcode-select -s /Applications/Xcode_14.2.app

      ### Caching
      - uses: actions/cache@v2
        name: "Cache Derived Data"
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData/Swiftcord-*/Build
            ~/Library/Developer/Xcode/DerivedData/Swiftcord-*/SourcePackages
          key: ${{ runner.os }}-derivedData-cache-${{ hashFiles(
              'Swiftcord.xcodeproj/xcshareddata/swiftpm/Package.resolved'
            ) }}
          restore-keys: |
            ${{ runner.os }}-derivedData-cache
      - name: Avoid inode changes for DerivedData
        run: defaults write com.apple.dt.XCBuild IgnoreFileSystemDeviceInodeChanges -bool YES

      - name: Install sentry-cli
        run: curl -sL https://sentry.io/get-cli/ | SENTRY_CLI_VERSION="2.5.2" bash

      ### Certs
      - name: "Import Certificate: Development"
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.DEVELOPMENT_CERTIFICATE_DATA }}
          P12_PASSWORD: ${{ secrets.DEVELOPMENT_CERTIFICATE_PASSPHRASE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: "Import Certificate: Distribution"
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.DISTRIBUTION_CERTIFICATE_DATA }}
          P12_PASSWORD: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSPHRASE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: "Update Xcode Team ID"
        run: |
            TEAMID=`awk -F '=' '/DEVELOPMENT_TEAM/ {print $2; exit}' Swiftcord.xcodeproj/project.pbxproj`
            sed -i '' "s/$TEAMID/ RJNC97Y8QD;/g" Swiftcord.xcodeproj/project.pbxproj

      - name: "Create Release Build Archive"
        run: |
          xcodebuild -project Swiftcord.xcodeproj -scheme Swiftcord -configuration Release archive -archivePath Swiftcord.xcarchive \
          COMPILER_INDEX_STORE_ENABLE=NO \
          APPCENTER_APP_SECRET="${{ secrets.APPCENTER_APP_SECRET }}" SENTRY_API_TOKEN="${{ secrets.SENTRY_API_TOKEN }}" \
          "OTHER_CODE_SIGN_FLAGS=--keychain $RUNNER_TEMP/app-signing.keychain-db"

      - name: "Export & Sign Release Build"
        uses: devbotsxyz/xcode-export-archive@main
        with:
          project: Swiftcord.xcodeproj
          scheme: Swiftcord

      - name: Create Release DMG
        run: npm install --global create-dmg && create-dmg Export/Swiftcord.app

      - name: "Notarize Release Build"
        run: |
            xcrun notarytool store-credentials "AC_PASSWORD" --apple-id ${{ secrets.APPSTOREONNECT_USERNAME }} --team-id RJNC97Y8QD --password ${{ secrets.APPSTORECONNECT_PASSWORD }}
            xcrun notarytool submit Swiftcord*.dmg --keychain-profile "AC_PASSWORD" --wait

      - name: "Staple Release Build"
        run: xcrun stapler staple Swiftcord*.dmg

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.0.0
        with:
          # Artifact name
          name: Swiftcord_Canary # optional, default is artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: Swiftcord*.dmg

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db


